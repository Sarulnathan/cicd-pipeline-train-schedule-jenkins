# vm-win.yaml
apiVersion: kubevirt.io/v1
kind: VirtualMachine
metadata:
  name: win2019
  namespace: win-tenant
spec:
  runStrategy: Manual   # or Always, RerunOnFailure
  template:
    spec:
      domain:
        cpu:
          cores: 4
        resources:
          requests:
            memory: 8Gi
        devices:
          disks:
            - name: rootdisk
              disk:
                bus: virtio
              bootOrder: 1
            # Optional: mount virtio drivers ISO if your image lacks drivers
            # - name: virtio-drivers
            #   cdrom: {}
          interfaces:
            - name: default
              masquerade: {}
        firmware:
          bootloader:
            efi:
              secureBoot: false     # set true if your image/drivers support SB
      networks:
        - name: default
          pod: {}
      volumes:
        - name: rootdisk
          dataVolume:
            name: win2019-dv
        # If your image includes Cloudbase-Init, you can pass cloud-init like this:
        # - name: sysprep
        #   cloudInitNoCloud:
        #     userData: |
        #       #cloud-config
        #       users:
        #         - name: Administrator
        #           passwd: "P@ssw0rd123!"
        #           lock_passwd: false
        #       runcmd:
        #         - [ powershell, "Set-NetConnectionProfile -NetworkCategory Private" ]
        #
        # Optional: virtio drivers container disk (image varies by subscription)
        # - name: virtio-drivers
        #   containerDisk:
        #     image: registry.redhat.io/container-native-virtualization/virtio-win  # example
